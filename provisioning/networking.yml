- hosts: gateway
  vars:
    ansible_user: ansible
  become: yes
  tasks:
    - name: Setup NAT
      shell: |
        echo net.ipv4.ip_forward=1 > /etc/sysctl.conf
        sysctl -p
        firewall-cmd --permanent --zone=dmz --change-interface={{ oob_iface }}
        firewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -o {{ oob_iface }} -s 172.16.3.0/24 -j MASQUERADE
        firewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 0 -i {{ sys_iface }} -o {{ oob_iface }} -j ACCEPT
        firewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 0 -i {{ sys_iface }} -o {{ oob_iface }} -m state --state RELATED,ESTABLISHED -j ACCEPT

      notify:
          - reload fw

  handlers:
    - name: reload fw
      shell: firewall-cmd --reload

- hosts: all
  vars:
    ansible_user: ansible
  become: yes
  tasks:

    - name: upgrade all packages
      yum:
        name: '*'
        state: latest

    - name: install packages
      yum:
        name: "{{ packages }}"
      vars:
        packages:
          - NetworkManager-glib
          - NetworkManager-dispatcher-routing-rules
          - nm-connection-editor
          - libsemanage-python
          - policycoreutils-python

    - name: Make sure firewall is running
      service:
        name: firewalld
        state: started

    - name: Allow dmz source subnets
      shell:
        firewall-cmd --zone=dmz --add-rich-rule='rule family="ipv4" source address="{{ item }}" port port=8080 protocol="tcp" accept' 
      loop:
        - "18.0.0.0/8"
        - "192.69.102.0/23"
        - "204.238.141.0/24"

- hosts: monitors
  vars:
    ansible_user: ansible
  become: yes
  tasks:
      - name: assign static addresses to interfaces
        nmcli:
          type: ethernet
          conn_name: "System {{item.iface}}"
          ip4: "{{ item.iface_ip4 }}"
          ifname: "{{ item.iface }}"
          state: present
        loop:
          - {iface: "{{ cls_iface }}", iface_ip4: "{{ cls_iface_ip4 }}/24"}
          - {iface: "{{ dmz_iface }}", iface_ip4: "{{ dmz_iface_ip4 }}/28"}
        notify:
        - restart networking

      - name: really make static (bug in nmcli module)
        shell:
          nmcli con mod "System {{ item }}" ipv4.method manual
        loop:
          - "{{ cls_iface }}"
          - "{{ dmz_iface }}"

      - name: put external interfaces in dmz
        shell:
          nmcli con mod "{{ item }}" connection.zone dmz
        loop:
          - "{{ oob_iface }}"
          - "System {{ dmz_iface }}"

      - name: trust internal interfaces
        shell:
          nmcli con mod "{{ item }}" connection.zone trusted
        loop:
          - "{{ sys_iface }}"
          - "System {{ cls_iface }}"   

      - name: table entry
        lineinfile:
          path: /etc/iproute2/rt_tables
          line: 200 dmz

      - name: create dmz route table
        lineinfile:
          path: /etc/sysconfig/network-scripts/route-enp179s0
          line: 'default via 192.69.103.241 table dmz'
          create: yes

      - name: create routing rule
        lineinfile:
          path: /etc/sysconfig/network-scripts/rule-enp179s0
          line: 'from {{ dmz_iface_ip4 }} table dmz'
          create: yes

      - name: ensure nm dispatcher is enabled/running
        service:
          name: NetworkManager-dispatcher.service
          enabled: yes
          state: started


  handlers:
    - name: restart networking
      service:
        name: network
        state: restarted

- hosts: ceph
  vars:
    ansible_user: ansible
  become: yes
  tasks: 
    - name: assign static addresses to interfaces
      nmcli:
        type: ethernet
        conn_name: "System {{ cls_iface }}"
        ip4: "{{ cls_iface_ip4 }}/24"
        ifname: "{{ cls_iface }}"
        state: present
      notify:
      - restart networking

    - name: really make static (bug in nmcli module)
      shell:
        nmcli con mod "System {{ cls_iface }}" ipv4.method manual
  
    - name: trust internal interfaces
      shell: 
        nmcli con mod "{{ item }}" connection.zone trusted
      loop:
        - "{{ sys_iface }}"
        - "System {{ cls_iface }}"

    - name: cleanup /dev/sda for ceph install
      shell: |
        wipefs -a /dev/sda
        touch /tmp/wiped
      args:
        creates: /tmp/wiped

  handlers:
    - name: restart networking
      service:
        name: network
        state: restarted
